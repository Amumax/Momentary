{"ast":null,"code":"var _jsxFileName = \"/Users/maksimnajdenov/momentary/src/components/Game/Game.js\",\n  _s = $RefreshSig$();\n// src/components/Game/Game.js\nimport React, { useState, useEffect } from 'react';\nimport './Game.css';\nimport { useTranslation } from 'react-i18next';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Game() {\n  _s();\n  const {\n    t\n  } = useTranslation();\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const [gridSize, setGridSize] = useState({\n    rows: 2,\n    cols: 2\n  });\n  const [sequence, setSequence] = useState([]);\n  const [userSequence, setUserSequence] = useState([]);\n  const [phase, setPhase] = useState('memorization'); // Возможные значения: 'memorization', 'selection', 'result'\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    // Определяем размеры сетки в зависимости от уровня\n    const size = getGridSizeForLevel(currentLevel);\n    setGridSize(size);\n\n    // Генерируем последовательность активных блоков\n    const seq = generateSequence(size, currentLevel);\n    setSequence(seq);\n\n    // Очищаем пользовательский выбор и сообщение\n    setUserSequence([]);\n    setMessage('');\n\n    // Устанавливаем фазу игры\n    setPhase('memorization');\n\n    // Переходим к фазе выбора после запоминания\n    const memorizationTime = currentLevel >= 9 ? sequence.length * 500 : 3000;\n    setTimeout(() => {\n      setPhase('selection');\n    }, memorizationTime);\n  }, [currentLevel]);\n  const getGridSizeForLevel = level => {\n    switch (level) {\n      case 1:\n        return {\n          rows: 2,\n          cols: 2\n        };\n      case 2:\n      case 3:\n        return {\n          rows: 3,\n          cols: 3\n        };\n      case 4:\n        return {\n          rows: 4,\n          cols: 4\n        };\n      case 5:\n        return {\n          rows: 5,\n          cols: 5\n        };\n      case 6:\n        return {\n          rows: 6,\n          cols: 6\n        };\n      case 7:\n        return {\n          rows: 7,\n          cols: 7\n        };\n      case 8:\n        return {\n          rows: 7,\n          cols: 9\n        };\n      case 9:\n        return {\n          rows: 3,\n          cols: 3\n        };\n      case 10:\n        return {\n          rows: 4,\n          cols: 4\n        };\n      case 11:\n        return {\n          rows: 5,\n          cols: 5\n        };\n      case 12:\n        return {\n          rows: 6,\n          cols: 6\n        };\n      case 13:\n        return {\n          rows: 7,\n          cols: 7\n        };\n      case 14:\n        return {\n          rows: 7,\n          cols: 8\n        };\n      case 15:\n        return {\n          rows: 7,\n          cols: 9\n        };\n      case 16:\n        return {\n          rows: 8,\n          cols: 10\n        };\n      default:\n        return {\n          rows: 2,\n          cols: 2\n        };\n    }\n  };\n  const generateSequence = (size, level) => {\n    const totalTiles = size.rows * size.cols;\n    let numberOfActiveTiles = Math.floor(totalTiles / 4) + 1; // Количество активных блоков\n\n    const seq = [];\n    const availableTiles = Array.from({\n      length: totalTiles\n    }, (_, index) => index);\n    if (level >= 9) {\n      // Для уровней 9 и выше последовательная подсветка\n      for (let i = 0; i < numberOfActiveTiles; i++) {\n        const randomIndex = Math.floor(Math.random() * availableTiles.length);\n        seq.push(availableTiles[randomIndex]);\n        availableTiles.splice(randomIndex, 1);\n      }\n    } else {\n      // Для уровней ниже 9 случайные блоки\n      while (seq.length < numberOfActiveTiles) {\n        const randomIndex = Math.floor(Math.random() * totalTiles);\n        if (!seq.includes(randomIndex)) {\n          seq.push(randomIndex);\n        }\n      }\n    }\n    return seq;\n  };\n  const handleTileClick = index => {\n    if (phase === 'selection') {\n      if (userSequence.includes(index)) {\n        // Если блок уже выбран, отменяем выбор\n        setUserSequence(userSequence.filter(i => i !== index));\n      } else {\n        // Добавляем блок в выбор\n        setUserSequence([...userSequence, index]);\n      }\n    }\n  };\n  const finishLevel = () => {\n    setPhase('result');\n\n    // Проверяем, сколько блоков угадано правильно\n    const correctTiles = sequence.filter(tile => userSequence.includes(tile)).length;\n    const totalActiveTiles = sequence.length;\n    setMessage(`${t('correct')}: ${correctTiles} / ${totalActiveTiles}`);\n\n    // Здесь можно добавить логику начисления монет и перехода на следующий уровень\n  };\n  const nextLevel = () => {\n    if (currentLevel < 16) {\n      setCurrentLevel(currentLevel + 1);\n    } else {\n      // Если это последний уровень, можно завершить игру или начать заново\n      setCurrentLevel(1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [t('level'), \" \", currentLevel]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      style: {\n        gridTemplateColumns: `repeat(${gridSize.cols}, 50px)`\n      },\n      children: Array.from({\n        length: gridSize.rows * gridSize.cols\n      }, (_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `tile ${phase === 'memorization' && sequence.includes(index) ? 'active' : phase === 'selection' && userSequence.includes(index) ? 'selected' : ''}`,\n        onClick: () => handleTileClick(index)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), phase === 'selection' && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"finish-button\",\n      onClick: finishLevel,\n      children: t('finish')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }, this), phase === 'result' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"next-level-button\",\n        onClick: nextLevel,\n        children: t('next_level')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"iUnabXOzoXoAovlqrStvLPpj+ik=\", false, function () {\n  return [useTranslation];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","useTranslation","jsxDEV","_jsxDEV","Game","_s","t","currentLevel","setCurrentLevel","gridSize","setGridSize","rows","cols","sequence","setSequence","userSequence","setUserSequence","phase","setPhase","message","setMessage","size","getGridSizeForLevel","seq","generateSequence","memorizationTime","length","setTimeout","level","totalTiles","numberOfActiveTiles","Math","floor","availableTiles","Array","from","_","index","i","randomIndex","random","push","splice","includes","handleTileClick","filter","finishLevel","correctTiles","tile","totalActiveTiles","nextLevel","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","gridTemplateColumns","onClick","_c","$RefreshReg$"],"sources":["/Users/maksimnajdenov/momentary/src/components/Game/Game.js"],"sourcesContent":["// src/components/Game/Game.js\nimport React, { useState, useEffect } from 'react';\nimport './Game.css';\nimport { useTranslation } from 'react-i18next';\n\nfunction Game() {\n  const { t } = useTranslation();\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const [gridSize, setGridSize] = useState({ rows: 2, cols: 2 });\n  const [sequence, setSequence] = useState([]);\n  const [userSequence, setUserSequence] = useState([]);\n  const [phase, setPhase] = useState('memorization'); // Возможные значения: 'memorization', 'selection', 'result'\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    // Определяем размеры сетки в зависимости от уровня\n    const size = getGridSizeForLevel(currentLevel);\n    setGridSize(size);\n\n    // Генерируем последовательность активных блоков\n    const seq = generateSequence(size, currentLevel);\n    setSequence(seq);\n\n    // Очищаем пользовательский выбор и сообщение\n    setUserSequence([]);\n    setMessage('');\n\n    // Устанавливаем фазу игры\n    setPhase('memorization');\n\n    // Переходим к фазе выбора после запоминания\n    const memorizationTime = currentLevel >= 9 ? sequence.length * 500 : 3000;\n    setTimeout(() => {\n      setPhase('selection');\n    }, memorizationTime);\n  }, [currentLevel]);\n\n  const getGridSizeForLevel = (level) => {\n    switch (level) {\n      case 1:\n        return { rows: 2, cols: 2 };\n      case 2:\n      case 3:\n        return { rows: 3, cols: 3 };\n      case 4:\n        return { rows: 4, cols: 4 };\n      case 5:\n        return { rows: 5, cols: 5 };\n      case 6:\n        return { rows: 6, cols: 6 };\n      case 7:\n        return { rows: 7, cols: 7 };\n      case 8:\n        return { rows: 7, cols: 9 };\n      case 9:\n        return { rows: 3, cols: 3 };\n      case 10:\n        return { rows: 4, cols: 4 };\n      case 11:\n        return { rows: 5, cols: 5 };\n      case 12:\n        return { rows: 6, cols: 6 };\n      case 13:\n        return { rows: 7, cols: 7 };\n      case 14:\n        return { rows: 7, cols: 8 };\n      case 15:\n        return { rows: 7, cols: 9 };\n      case 16:\n        return { rows: 8, cols: 10 };\n      default:\n        return { rows: 2, cols: 2 };\n    }\n  };\n\n  const generateSequence = (size, level) => {\n    const totalTiles = size.rows * size.cols;\n    let numberOfActiveTiles = Math.floor(totalTiles / 4) + 1; // Количество активных блоков\n\n    const seq = [];\n    const availableTiles = Array.from({ length: totalTiles }, (_, index) => index);\n\n    if (level >= 9) {\n      // Для уровней 9 и выше последовательная подсветка\n      for (let i = 0; i < numberOfActiveTiles; i++) {\n        const randomIndex = Math.floor(Math.random() * availableTiles.length);\n        seq.push(availableTiles[randomIndex]);\n        availableTiles.splice(randomIndex, 1);\n      }\n    } else {\n      // Для уровней ниже 9 случайные блоки\n      while (seq.length < numberOfActiveTiles) {\n        const randomIndex = Math.floor(Math.random() * totalTiles);\n        if (!seq.includes(randomIndex)) {\n          seq.push(randomIndex);\n        }\n      }\n    }\n\n    return seq;\n  };\n\n  const handleTileClick = (index) => {\n    if (phase === 'selection') {\n      if (userSequence.includes(index)) {\n        // Если блок уже выбран, отменяем выбор\n        setUserSequence(userSequence.filter((i) => i !== index));\n      } else {\n        // Добавляем блок в выбор\n        setUserSequence([...userSequence, index]);\n      }\n    }\n  };\n\n  const finishLevel = () => {\n    setPhase('result');\n\n    // Проверяем, сколько блоков угадано правильно\n    const correctTiles = sequence.filter((tile) => userSequence.includes(tile)).length;\n    const totalActiveTiles = sequence.length;\n\n    setMessage(`${t('correct')}: ${correctTiles} / ${totalActiveTiles}`);\n\n    // Здесь можно добавить логику начисления монет и перехода на следующий уровень\n  };\n\n  const nextLevel = () => {\n    if (currentLevel < 16) {\n      setCurrentLevel(currentLevel + 1);\n    } else {\n      // Если это последний уровень, можно завершить игру или начать заново\n      setCurrentLevel(1);\n    }\n  };\n\n  return (\n    <div className=\"game\">\n      <h2>\n        {t('level')} {currentLevel}\n      </h2>\n      <div className=\"grid\" style={{ gridTemplateColumns: `repeat(${gridSize.cols}, 50px)` }}>\n        {Array.from({ length: gridSize.rows * gridSize.cols }, (_, index) => (\n          <div\n            key={index}\n            className={`tile ${\n              phase === 'memorization' && sequence.includes(index)\n                ? 'active'\n                : phase === 'selection' && userSequence.includes(index)\n                ? 'selected'\n                : ''\n            }`}\n            onClick={() => handleTileClick(index)}\n          ></div>\n        ))}\n      </div>\n      {phase === 'selection' && (\n        <button className=\"finish-button\" onClick={finishLevel}>\n          {t('finish')}\n        </button>\n      )}\n      {phase === 'result' && (\n        <div>\n          <p>{message}</p>\n          <button className=\"next-level-button\" onClick={nextLevel}>\n            {t('next_level')}\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Game;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}